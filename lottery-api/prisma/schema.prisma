// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  fullName         String   @map("full_name")
  email            String   @unique
  username         String   @unique
  location         String?
  password         String
  role             String   @default("user")
  isEmailVerified  Boolean  @default(false) @map("is_email_verified")
  depositCount     Int      @default(0) @map("deposit_count")
  surpriseActivated Boolean @default(false) @map("surprise_activated")
  referralCode     String   @unique @map("referral_code")
  referredBy       String?  @map("referred_by")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  wallet           Wallet?
  tickets          Ticket[]
  deposits         Deposit[]
  withdrawals      Withdrawal[]
  otpVerifications OtpVerification[]
  
  @@map("users")
}

model Wallet {
  id               String   @id @default(uuid())
  userId           String   @unique @map("user_id")
  balance          Decimal  @default(0) @db.Decimal(10,2)
  depositAddress   String   @map("deposit_address")
  totalDeposited   Decimal  @default(0) @map("total_deposited") @db.Decimal(10,2)
  totalWithdrawn   Decimal  @default(0) @map("total_withdrawn") @db.Decimal(10,2)
  referralEarnings Decimal  @default(0) @map("referral_earnings") @db.Decimal(10,2)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallets")
}

model Draw {
  id                String   @id @default(uuid())
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  status            String   @default("active") // active, completed, cancelled
  firstPrizeWinner  String?  @map("first_prize_winner")
  secondPrizeWinner String?  @map("second_prize_winner")
  thirdPrizeWinner  String?  @map("third_prize_winner")
  totalTickets      Int      @default(0) @map("total_tickets")
  prizePool         Decimal  @default(0) @map("prize_pool") @db.Decimal(10,2)
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  tickets Ticket[]
  
  @@map("draws")
}

model Ticket {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  ticketNumber  String   @map("ticket_number")
  purchasePrice Decimal  @map("purchase_price") @db.Decimal(10,2)
  drawId        String   @map("draw_id")
  status        String   @default("active") // active, expired, winner
  purchasedAt   DateTime @default(now()) @map("purchased_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  draw Draw @relation(fields: [drawId], references: [id], onDelete: Cascade)
  
  @@map("tickets")
}

model Deposit {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  amount        Decimal  @db.Decimal(10,2)
  transactionId String   @unique @map("transaction_id")
  status        String   @default("pending") // pending, completed, failed
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("deposits")
}

model Withdrawal {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  amount        Decimal   @db.Decimal(10,2)
  walletAddress String    @map("wallet_address")
  status        String    @default("pending") // pending, completed, rejected
  requestedAt   DateTime  @default(now()) @map("requested_at")
  processedAt   DateTime? @map("processed_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("withdrawals")
}

model OtpVerification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  email     String
  otp       String
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_verifications")
}

